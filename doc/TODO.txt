# TODO projet

- Grille 28x22
- Vagues de monstres
- Mana
  - Gain en tuant des monstres
  - Quantité minimale pour bannir des monstres entrant dans le camp
  - Plus de mana = défaite
- Score final : nombre de vagues endurées + quantité de dégât 
- Chemin : ensemble de cases qui relient le nid des monstres au camp du joueur

- Vagues de monstres
  - toutes les 35 secondes
  - 1ere vague déclenchée par le joueur
  - si autre vague déclenchée par le joueur : +t% de capacité maximale de la réserve de mana (t : temps restant avant prochaine vague)
  - type de vague : 
    - normale : 12 monstres, 1 c/s, 50%
    - foule : 24 monstres, 1 c/s, 20%
    - agile : 12 monstres, 2 c/s, 20%
    - boss : 2 monstres, 1 c/s, 10%
  - type tiré au hasard
  - HP des monstres pour une vague i:  
    - h * 1.2^i (h une constante)
    - 12 * h * 1.2^i pour une vague de boss
  - Monstre possède une teinte

- Mana
  - Réserve initiale : Niveau 0, Maximum 2000, 150
  - Niveau n, Maximum 2000 * 1.4^n 
  - Augmenter la réserve : 25% du max de mana = 500 * 1.4^n
  - Monstre éliminé : + (10% HP * 1.3^n) avec n niveau de la réserve de mana
  - Monstre banni et retour au nid : - (15% HP * 1.3^n)
  - Si plus de mana : défaite

- Tours
  - Baties sur cases vides 
  - Permanentes
  - 3 tours offertes, 100 mana tour 1, doublé pour chaque nouvelle tour
  - Ne tirent pas toutes seules

- Gemmes
  - Placées dans les tours pour tirer
  - Placement et remplacement : chargement de 2 secondes
  - Tir :
    - Fréquence max : 2 par seconde
    - Si monstre dans un rayon de 3 cases
    - Priorité monstre avec le + grand HP
  - Types : 
    - gemme pure 
      - rouge, verte, bleue
      - création gemme niveau n: 
        - coût : (100 * 2^n) mana
        - type aléatoire et teinte aléatoire dans le type 
    - gemme mixte
  - Possède teinte et niveau
  - Dégat généré : 
    - d * 2^n * (1 - cos(t_g - t_m)/2) 
    - d : constante
    - n : niveau gemme
    - t_g : teinte gemme
    - t_m : teinte monstre
  - Fusion 2 gemmes de même niveau n: 
    - Coût : 100 mana
    - Niveau : n + 1
    - si résultat est gemme mixte : dégat * 2 (90%) ou dégat * 4 (10%)


- Teinte (couleur)
  - entier : 0 -> 359 
  - RGB d'une teinte : https://en.wikipedia.org/wiki/HSL_and_HSV
  - pour un monstre : tirée aléatoirement
  - O-30|330-359 (Rouge) -> élément Pyro
  - 90-150 (Verte) -> élément Dendro
  - 210-270 (Bleue) -> élément Hydro

- Eléments : 
  - Si un monstre sans résidu : élement devient résidu du monstre
  - Effet des éléments prend effet lorsqu'un monstre ayant un résidu élémentaire reçoit un tir

  - Pyro + pyro : éclaboussure -> 15% du dégat de base dans un rayon de 2 cases (prendre en compte la teinte)
  - Dendro + dendro : parasite -> 2.5% du dégat toutes les 1/2 secondes pendant 10 secondes
  - Hydro + hydro : ralentissement -> vitesse / 1.5 pendant 10 secondes

  - Pyro + hydro : vaporisation -> 5% du dégat de base dans un rayon de 3.5 cases
  - Pyro + dendro : combustion -> dégat * 3
  - Hydro + dendro : enracinement -> monstre immobilisé pendant 3 secondes 

  Enum éléments:
  - PYRO : 1
  - DENDRO : 2
  - HYDRO : 4

  Enum effets_élements:
  - PYRO | PYRO = 1
  - DENDRO | DENDRO = 2
  - HYDRO | HYDRO = 4
  - PYRO | HYDRO = 5
  - PYRO | DENDRO = 3
  - HYDRO | DENDRO = 6

- Chemin :
  - Généré aléatoirement 
  - Distance de Manhattan de deux cases (i1, j1), (i2, j2) : |i1 - i2| + |j1 - j2|
  - Etendu d'une case dans une direction : nombre maximal de cases dans cette direction sans etre en distance <= 2 
  aux autres cases du chemin ou à l'extérieur de la grille
  - Algo de génération aléatoire
    1. Init grille vide
    2. Choisir case aléatoire (distance >= 3 aux bords) = nid des monstres
    3. Calculer étendu de chaque direction : choisir aléatoirement direction (proba proportionnelles à l'étendu)
    4. Etendu direction courante : n
      - si n <= 2 : -> étape 7
      - sinon tirer n valeurs aléatoires, 1 (prob. 3/4) ou 0 (prob 1/4). 
      s: somme des valeurs, ajouter max(s,3) cases dans la directio courante. 
    5. Calculer étendu des directions gauche et droite (en tournant de 90°) : choisir aléatoirement direction (proba proportionnelles à l'étendu)
    6. -> étape 4
    7. si >= 7 virages et longueur >= 75, fini. sinon -> étape 1.

- Animation :
  - framerate : 60 (rafraichissement toutes les 1/60 secondes) -> une boucle qui gère frame par frame 
  - Calculs pour les mouvements : flottants
  - Déplacement des monstres : 
    - continu au centre des cases
    - fluctuation aléatoire de la distance parcourue entre chaque mise a jour: entre (0.9 * v/60) et (1.1 * v/60) 
  - Deplacement des tirs :
    - commence au centre de la gemme
    - vitesse : 3 cases par secondes
    - a chaque mise a jour : avancement du tir vers position courante du monstre
    - si distance (tir - monstre) < distance parcourue entre 2 mise a jour -> tir atteri sur le monstre 
    - si monstre battu : tous les tirs vers le monstre disparaissent
    - direction du tir : 
      - vecteur : v = (xv, yv) = ( (xM − xT)/∥MT∥ , (yM − yT)/∥MT∥ )
      - ∥MT∥ = sqrt((xM - xT)² + (yM - yT)²)
      - d : distance parcourue entre deux mise à jour
      - nouvelle position du tir : (xT + xv*d, yT + yv*d)

- Hue to RGB :
  - H = hue/60
  - C = (1 - |2L - 1|) * S
  - X = C * (1 - |H%2 - 1|)
  - (R1,G1,B1) = 
    - H < 1 : (C, X, 0)
    - H < 2 : (H, C, 0)
    - H < 3 : (0, C, X)
    - H < 4 : (0, X, C)
    - H < 5 : (X, 0, C)
    - H < 6 : (C, 0, X)
  - m = L - C/2
  - (R, G, B) = (R1 + m, G1 + m, B1 + m)

Calculs renvoient des entiers  

Modules :
  - Grille/Grid
    - Direction enumeration
    - Cell structure (type of cell : empty/trail/tower/monsterNest/playerNest ??)
    - Grid structure : array of cells ??
    - radius calculation (if monster in (x, y) radius of n)
  - Chemin/Trail
    - Trail structure : array of cells
    - Trail generation
  - Mana
    - Mana structure (Level, max, quantity, ...)
    - Adding/Removing mana
  - Monstres/Monsters
    - Monster structure (Position, Speed, Direction?, HP, Hue, Residu, Alive?, Shots list, Start move time, ...)
    - Generating monster
    - Decreasing HP, adding residu
  - Vagues/Waves
    - Wave structure (List of monsters, time left before next wave, ...)
  - Tours/Towers 
    - Tower structure (Gem, position)
  - Elements
    - Enum élément
    - Enum effets_élements
    - Application de l'effet
    - Fonction : reçoit une teinte, renvoie l'élément associé
  - Teintes/Hues
    - Structure hue (Value, Element, RGB?)
    - Hue to RGB
  - Gemmes/Gems
    - Gem structure (tower, active ?, start time, shot frequence, 
                    type(red, green, blue, mixed), hue, level, damageMult, ...)
    - gem generation
    - gem level up
    - gem Fusion
    - gem replacement 
  - Inventory
    - Array of gems
  - Tirs/Shots
    - Shot structure (Position, speed, GemSource, ...)
    - Shot movement
  - Chronomètre/Timer
    - Time structure
    - Time reset 
    - Calculates current time
  
  - Graphique:
    - Affichage/Display 
    - Animation
    - Récupération d'événements/Events
  - 

